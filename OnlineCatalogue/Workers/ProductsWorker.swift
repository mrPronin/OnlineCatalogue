//
//  ProductsWorker.swift
//  OnlineCatalogue
//
//  Created by Aleksandr Pronin on 12/6/16.
//  Copyright (c) 2016 Aleksandr Pronin. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import Foundation

// MARK: - Products worker

class ProductsWorker
{
    var productsStore: ProductsStoreProtocol
    
    init(productsStore: ProductsStoreProtocol) {
        self.productsStore = productsStore
    }
    
    func fetchStoredProducts(_ completionHandler: @escaping (_ products: [Product], _ error: ProductsOperationError?) -> Void)
    {
        productsStore.fetchStoredProducts { (products: [Product], error) -> Void in
            completionHandler(products, error)
        }
    }
    
    func searchProducts(_ searchString: String,  completionHandler: @escaping (_ products: [Product]) -> Void)
    {
        productsStore.searchProducts(searchString) {(products: [Product]) -> Void in
            completionHandler(products)
        }
    }
    
    func fetchProduct(_ id: String, completionHandler: @escaping (_ product: Product?, _ error: ProductsOperationError?) -> Void)
    {
        productsStore.fetchProduct(id) {(product, error) -> Void in
            completionHandler(product, error)
        }
    }
    
    func storeProduct(_ productToStore: Product, completionHandler: @escaping (_ error: ProductsOperationError?) -> Void)
    {
        productsStore.storeProduct(productToStore) { error in
            completionHandler(error)
        }
    }
}

// MARK: - Products store API

protocol ProductsStoreProtocol {
    func fetchStoredProducts(_ completionHandler: @escaping (_ products: [Product], _ error: ProductsOperationError?) -> Void)
    func searchProducts(_ searchString: String,  completionHandler: @escaping (_ products: [Product]) -> Void)
    func fetchProduct(_ id: String, completionHandler: @escaping (_ product: Product?, _ error: ProductsOperationError?) -> Void)
    func storeProduct(_ productToStore: Product, completionHandler: @escaping (_ error: ProductsOperationError?) -> Void)
}

enum OrdersStoreResult<U>
{
    case success(result: U)
    case failure(error: ProductsOperationError)
}

// MARK: - Orders store CRUD operation errors

enum ProductsOperationError: Equatable, Error
{
    case cannotFetch(String)
    case cannotCreate(String)
    case cannotUpdate(String)
    case cannotDelete(String)
}

func ==(lhs: ProductsOperationError, rhs: ProductsOperationError) -> Bool
{
    switch (lhs, rhs) {
    case (.cannotFetch(let a), .cannotFetch(let b)) where a == b: return true
    case (.cannotCreate(let a), .cannotCreate(let b)) where a == b: return true
    case (.cannotUpdate(let a), .cannotUpdate(let b)) where a == b: return true
    case (.cannotDelete(let a), .cannotDelete(let b)) where a == b: return true
    default: return false
    }
}
