//
//  ProductsListViewController.swift
//  OnlineCatalogue
//
//  Created by Aleksandr Pronin on 12/6/16.
//  Copyright (c) 2016 Aleksandr Pronin. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol ProductsListViewControllerInput
{
    func displayFetchedStoredOrders(viewModel: ProductsList.FetchStoredProducts.ViewModel)
    func displaySearchResult(viewModel: ProductsList.SearchProducts.ViewModel)
}

protocol ProductsListViewControllerOutput
{
    func fetchStoredProducts(request: ProductsList.FetchStoredProducts.Request)
    func searchProducts(request: ProductsList.SearchProducts.Request)
    var storedProducts: [Product]? { get }
    var searchResult: [Product]? { get }
}

class ProductsListViewController: UIViewController, ProductsListViewControllerInput
{
    var output: ProductsListViewControllerOutput!
    var router: ProductsListRouter!
    var displayedStoredProducts: [ProductsList.FetchStoredProducts.ViewModel.DispayedProduct] = []
    var displayedSearchResult: [ProductsList.SearchProducts.ViewModel.DispayedProduct] = []
    
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var collectionView: UICollectionView!
    @IBOutlet weak var searchBar: UISearchBar!
    
    lazy var placeholderImage: UIImage = {
        let image = UIImage(named: "placeholder")!
        return image
    }()
    
    // MARK: - Object lifecycle
    
    override func awakeFromNib()
    {
        super.awakeFromNib()
        ProductsListConfigurator.sharedInstance.configure(viewController: self)
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        self.collectionView.dataSource = self
        self.collectionView.delegate = self
        self.tableView.dataSource = self
        self.tableView.delegate = self
        self.searchBar.delegate = self
        
        fetchStoredProductsOnLoad()
    }
    
    // MARK: - Event handling
    
    func fetchStoredProductsOnLoad()
    {
        // NOTE: Ask the Interactor to do some work
        let request = ProductsList.FetchStoredProducts.Request()
        output.fetchStoredProducts(request: request)
    }
    
    // MARK: - Display logic
    
    func displayFetchedStoredOrders(viewModel: ProductsList.FetchStoredProducts.ViewModel)
    {
        displayedStoredProducts = viewModel.displayedProducts
        collectionView.reloadData()
    }
    
    func displaySearchResult(viewModel: ProductsList.SearchProducts.ViewModel)
    {
        displayedSearchResult = viewModel.displayedProducts
        tableView.reloadData()
    }
}

extension ProductsListViewController: UICollectionViewDataSource, UICollectionViewDelegate {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return displayedStoredProducts.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let displayedProduct = displayedStoredProducts[(indexPath as NSIndexPath).row]
        
        let cell = collectionView.dequeueReusableCell(
            withReuseIdentifier: ProductCollectionViewCell.ReuseIdentifier,
            for: indexPath
            ) as! ProductCollectionViewCell
        
        cell.configureCell(
            with: displayedProduct,
            placeholderImage: placeholderImage
        )
        
        return cell
    }
    
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 1
    }
}

extension ProductsListViewController: UITableViewDataSource, UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displayedSearchResult.count
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let displayedProduct = displayedSearchResult[(indexPath as NSIndexPath).row]
        let cell = tableView.dequeueReusableCell(
            withIdentifier: ProductTableViewCell.ReuseIdentifier,
            for: indexPath
        ) as! ProductTableViewCell
        
        cell.configureCell(
            with: displayedProduct,
            placeholderImage: placeholderImage
        )
        
        return cell
    }
}

extension ProductsListViewController: UISearchBarDelegate {
    
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        searchBar.resignFirstResponder()
        if let searchString = searchBar.text {
            let request = ProductsList.SearchProducts.Request(searchString: searchString)
            output.searchProducts(request: request)
        }
    }
}
