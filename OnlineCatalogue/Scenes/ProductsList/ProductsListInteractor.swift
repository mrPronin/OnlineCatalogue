//
//  ProductsListInteractor.swift
//  OnlineCatalogue
//
//  Created by Aleksandr Pronin on 12/6/16.
//  Copyright (c) 2016 Aleksandr Pronin. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol ProductsListInteractorInput
{
    func fetchStoredProducts(request: ProductsList.FetchStoredProducts.Request)
    func searchProducts(request: ProductsList.SearchProducts.Request)
    var storedProducts: [Product]? { get }
    var searchResult: [Product]? { get }
}

protocol ProductsListInteractorOutput
{
    func presentStoredProducts(response: ProductsList.FetchStoredProducts.Response)
    func presentSearchResult(response: ProductsList.SearchProducts.Response)
}

class ProductsListInteractor: ProductsListInteractorInput
{
    var output: ProductsListInteractorOutput!
    var storedProductsWorker = ProductsWorker(productsStore: ProductsMemStore())
    var searchProductsWorker = ProductsWorker(productsStore: ProductsAPI())
    var storedProducts: [Product]?
    var searchResult: [Product]?
    
    // MARK: - Business logic
    
    func fetchStoredProducts(request: ProductsList.FetchStoredProducts.Request)
    {
        storedProductsWorker.fetchStoredProducts { (products) -> Void in
            self.storedProducts = products
            let response = ProductsList.FetchStoredProducts.Response(products: products)
            self.output.presentStoredProducts(response: response)
        }
    }
    
    func searchProducts(request: ProductsList.SearchProducts.Request)
    {
        let searchString = request.searchString
        searchProductsWorker.searchProducts(searchString) { (products) -> Void in
            self.searchResult = products
            let response = ProductsList.SearchProducts.Response(products: products)
            self.output.presentSearchResult(response: response)
        }
    }
}
