//
//  ProductsListViewControllerTests.swift
//  OnlineCatalogue
//
//  Created by Aleksandr Pronin on 12/6/16.
//  Copyright (c) 2016 Aleksandr Pronin. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

@testable import OnlineCatalogue
import XCTest

class ProductsListViewControllerTests: XCTestCase
{
    // MARK: - Subject under test
    
    var sut: ProductsListViewController!
    var window: UIWindow!
    
    // MARK: - Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        window = UIWindow()
        setupProductsListViewController()
    }
    
    override func tearDown()
    {
        window = nil
        super.tearDown()
    }
    
    // MARK: - Test setup
    
    func setupProductsListViewController()
    {
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: "Main", bundle: bundle)
        sut = storyboard.instantiateViewController(withIdentifier: "ProductsListViewController") as! ProductsListViewController
//        _ = sut.view
//        addViewToWindow()
        
    }
    
    func addViewToWindow()
    {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: - Test doubles
    
    class ProductsListViewControllerOutputSpy: ProductsListViewControllerOutput
    {
        // MARK: Method call expectation
        var fetchStoredProductsCalled = false
        var searchProductsCalled = false
        
        var storedProducts: [Product]?
        var searchResult: [Product]?
        
        // MARK: Spyed methods
        func fetchStoredProducts(request: ProductsList.FetchStoredProducts.Request)
        {
            fetchStoredProductsCalled = true
        }
        
        func searchProducts(request: ProductsList.SearchProducts.Request)
        {
            searchProductsCalled = true
        }
    }
    
    class CollectionViewSpy: UICollectionView
    {
        // MARK: Method call expectations
        var reloadDataCalled = false
        
        // MARK: Spied methods
        override func reloadData()
        {
            reloadDataCalled = true
        }
    }
    
    // MARK: - Tests
    
    func testShouldFetchStoredProductsWhenViewIsLoaded()
    {
        // Given
        let productsListViewControllerOutputSpy = ProductsListViewControllerOutputSpy()
        sut.output = productsListViewControllerOutputSpy
        
        // When
        addViewToWindow()
        
        // Then
        XCTAssert(productsListViewControllerOutputSpy.fetchStoredProductsCalled, "Should fetch stored products when the view is loaded")
    }
    
    /*
    func testShouldDisplayFetchedStoredProducts()
    {
        // Given
        addViewToWindow()
        let collectionViewSpy = CollectionViewSpy()
        sut.collectionView = collectionViewSpy
        
        let displayedProducts = [
            ProductsList.FetchStoredProducts.ViewModel.DispayedProduct(
                id: "MLU441497969",
                site_id: "MLU",
                title: "Notebook Acer 14 Cloudbook 32gb Win10 Hasta 12 Pagos S/rec",
                price: "199.00",
                currency_id: "USD",
                thumbnailURLString: "http://mlu-s2-p.mlstatic.com/585221-MLU20740156773_052016-I.jpg"
            )
        ]
        let viewModel = ProductsList.FetchStoredProducts.ViewModel(displayedProducts: displayedProducts)
        
        // When
        sut.displayFetchedStoredOrders(viewModel: viewModel)
        
        // Then
        XCTAssert(collectionViewSpy.reloadDataCalled, "Displaying fetched products should reload the collection view")
    }
    */
    
    func testNumberOfSectionsInCollectionViewShouldAlwaysBeOne()
    {
        // Given
        addViewToWindow()
        let collectionView = sut.collectionView!
        
        // When
        let numberOfSections = sut.numberOfSections(in: collectionView)
        
        // Then
        XCTAssertEqual(numberOfSections, 1, "The number of collection view sections should always be 1")
    }
    
    func testNumberOfRowsInAnySectionForCollectionViewShouldEqaulNumberOfProductsToDisplay()
    {
        // Given
        addViewToWindow()
        let collectionView = sut.collectionView!
        let displayedProducts = [
            ProductsList.FetchStoredProducts.ViewModel.DispayedProduct(
                id: "MLU441497969",
                site_id: "MLU",
                title: "Notebook Acer 14 Cloudbook 32gb Win10 Hasta 12 Pagos S/rec",
                price: "199.00",
                currency_id: "USD",
                thumbnailURLString: "http://mlu-s2-p.mlstatic.com/585221-MLU20740156773_052016-I.jpg"
            )
        ]
        sut.displayedStoredProducts = displayedProducts
        
        // When
        let numberOfRows = sut.collectionView(collectionView, numberOfItemsInSection: 0)
        
        // Then
        XCTAssertEqual(numberOfRows, displayedProducts.count, "The number of collection view items should equal the number of orders to display")
    }
    
    /*
    func testShouldConfigureCollectionViewCellToDisplayProduct()
    {
        // Given
        addViewToWindow()
        let displayedProducts = [
            ProductsList.FetchStoredProducts.ViewModel.DispayedProduct(
                id: "MLU441497969",
                site_id: "MLU",
                title: "Notebook Acer 14 Cloudbook 32gb Win10 Hasta 12 Pagos S/rec",
                price: "199.00",
                currency_id: "USD",
                thumbnailURLString: "http://mlu-s2-p.mlstatic.com/585221-MLU20740156773_052016-I.jpg"
            )
        ]
        sut.displayedStoredProducts = displayedProducts
        let collectionView = sut.collectionView!
        
        // When
        let indexPath = IndexPath(item: 0, section: 0)
        let cell = collectionView.cellForItem(at: indexPath) as! ProductCollectionViewCell
        
        // Then
        XCTAssertEqual(cell.priceLabel?.text, "199.00", "A properly configured collection view cell should display the product price")
    }
*/
    
}
