//
//  ProductsListWorkerTests.swift
//  OnlineCatalogue
//
//  Created by Aleksandr Pronin on 12/6/16.
//  Copyright (c) 2016 Aleksandr Pronin. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

@testable import OnlineCatalogue
import XCTest

class ProductsWorkerTests: XCTestCase
{
    // MARK: - Subject under test
    
    var sut: ProductsWorker!
    
    // MARK: - Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        setupProductsWorker()
    }
    
    override func tearDown()
    {
        super.tearDown()
    }
    
    // MARK: - Test setup
    
    func setupProductsWorker()
    {
        sut = ProductsWorker(productsStore: ProductsMemStoreSpy())
    }
    
    // MARK: - Test doubles
    
    class ProductsMemStoreSpy: ProductsMemStore
    {
        // MARK: Method call expectation
        var fetchStoredProductsCalled = false
        
        func fetchStoredProducts(_ completionHandler: @escaping (_ products: [Product]) -> Void)
        {
            fetchStoredProductsCalled = true
            let oneSecond = DispatchTime.now() + Double(1 * Int64(NSEC_PER_SEC)) / Double(NSEC_PER_SEC)
            DispatchQueue.main.asyncAfter(deadline: oneSecond, execute: {
                completionHandler([Product(), Product()])
            })
        }
    }
    
    // MARK: - Tests
    
    func testFetchOrdersShouldReturnListOfOrders()
    {
        // Given
        let productsMemStoreSpy = sut.productsStore as! ProductsMemStoreSpy
        
        // When
        let expectation = self.expectation(description: "Wait for fetchStoredProducts() to return")
        sut.fetchStoredProducts { (products: [Product], nil) -> Void in
            expectation.fulfill()
        }
        
        // Then
        XCTAssert(productsMemStoreSpy.fetchStoredProductsCalled, "Calling fetchStoredProducts() should ask the data store for a list of products")
        waitForExpectations(timeout: 1.1) { _ in
            XCTAssert(true, "Calling fetchStoredProducts() should result in the completion handler being called with the fetched products result")
        }
    }
}
